% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict3d.R
\name{predict3d}
\alias{predict3d}
\title{Draw 3d predict plot using package `rgl`}
\usage{
predict3d(fit, colorn = 20, maxylev = 6, se = FALSE,
  show.summary = FALSE, overlay = NULL, show.legend = FALSE,
  bg = NULL, type = "s", radius = 2, palette = "Blues",
  palette.reverse = TRUE, color = "red", show.subtitle = TRUE,
  show.plane = TRUE, plane.color = "blue", plane.alpha = 0.1,
  show.lines = TRUE, ...)
}
\arguments{
\item{fit}{A model object for which prediction is desired.}

\item{colorn}{An integer giving the desired number of intervals. Non-integer values are rounded down.}

\item{maxylev}{Maximal length of unique values of y axis variable to be trreated as a categorical variable.}

\item{se}{Logical. Whether or not show se. Only effective when the y-axis variable is a categorical one.}

\item{show.summary}{Logical. Whether or not show statistical summary}

\item{overlay}{Logical. Whether or not overlay plots}

\item{show.legend}{Logical. Whether or not show legend}

\item{bg}{Character. Background color of plot}

\item{type}{For the default method, a single character indicating the type of item to plot. Supported types are: 'p' for points, 's' for spheres, 'l' for lines, 'h' for line segments from z = 0, and 'n' for nothing. For the mesh3d method, one of 'shade', 'wire', or 'dots'. Partial matching is used.}

\item{radius}{The size of sphere}

\item{palette}{Name of color palette}

\item{palette.reverse}{Logical. Whether or not reverse the palette order}

\item{color}{Default color. Color is used when the palette is NULL}

\item{show.subtitle}{Logical. If true, show regression call as subtitle}

\item{show.plane}{Logical. If true, show regression plane}

\item{plane.color}{Name of color of regression plane}

\item{plane.alpha}{Transparency scale of regression plane}

\item{show.lines}{Logical. If true, show regression lines}

\item{...}{additional parameters which will be passed to plot3d}
}
\description{
Draw 3d predict plot using package `rgl`
}
\examples{
require(rgl)
fit=loess(mpg~hp*wt,data=mtcars)
ggPredict(fit)
predict3d(fit,radius=2)
fit=lm(mpg~hp*am,data=mtcars)
predict3d(fit)
require(moonBook)
fit=lm(NTAV~age*weight,data=radial)
fit=lm(NTAV~age*smoking,data=radial)
fit=lm(NTAV~age*weight*smoking,data=radial)
fit=lm(NTAV~age*smoking*DM,data=radial)
predict3d(fit)
predict3d(fit,overlay=TRUE)
require(TH.data)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
fit=glm(cens~pnodes*age,data=GBSG2,family=binomial)
predict3d(fit)
fit=glm(cens~pnodes*age*horTh,data=GBSG2,family=binomial)
predict3d(fit)
fit=glm(cens~pnodes+age+horTh,data=GBSG2,family=binomial)
predict3d(fit,overlay=TRUE)
predict3d(fit)
}
